"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var https = require("https");
var http = require("http");
var request = require("request");
var querystring = require("querystring");

var HttpClient = function () {
  function HttpClient(options, credentials) {
    _classCallCheck(this, HttpClient);

    this.credentials = credentials;
    this.host = options.host || "rest.nexmo.com";
    this.port = options.port || 443;
    this.https = options.https || https;
    this.http = options.http || http;
    this.headers = {
      "Content-Type": "application/x-www-form-urlencoded",
      Accept: "application/json"
    };
    this.logger = options.logger;
    this.timeout = options.timeout;
    this.requestLib = request;

    if (options.userAgent) {
      this.headers["User-Agent"] = options.userAgent;
    }
  }

  _createClass(HttpClient, [{
    key: "request",
    value: function request(endpoint, method, callback) {
      var _this = this;

      var skipJsonParsing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var customResponseParser = arguments[4];

      if (typeof method === "function") {
        callback = method;
        endpoint.method = endpoint.method || "GET";
      } else if (typeof method !== "undefined") {
        endpoint.method = method;
      }

      if (endpoint.method === "POST" || endpoint.method === "DELETE") {
        // TODO: verify the following fix is required
        // Fix broken due ot 411 Content-Length error now sent by Nexmo API
        // PL 2016-Sept-6 - commented out Content-Length 0
        // headers['Content-Length'] = 0;
      }
      var options = {
        host: endpoint.host ? endpoint.host : this.host,
        port: this.port,
        path: endpoint.path,
        method: endpoint.method,
        headers: Object.assign({}, this.headers)
      };

      if (this.timeout !== undefined) {
        options.timeout = this.timeout;
      }

      // Allow existing headers to be overridden
      // Allow new headers to be added
      if (endpoint.headers) {
        Object.keys(endpoint.headers).forEach(function (key) {
          options.headers[key] = endpoint.headers[key];
        });
      }

      if (this.credentials.signatureSecret && this.credentials.signatureMethod) {
        var splitPath = options.path.split(/\?(.+)/);
        var path = splitPath[0];

        var params = querystring.decode(splitPath[1]);

        // add timestamp if not already present
        if (!params.timestamp) {
          params.timestamp = new Date().getTime() / 1000 | 0; // floor to seconds
          params.timestamp = params.timestamp.toString();
        }

        // strip API Secret
        delete params.api_secret;

        var hash = this.credentials.generateSignature(params);

        var query = "";

        // rebuild query
        Object.keys(params).sort().forEach(function (key) {
          query += "&" + key + "=" + params[key];
        });

        // replace the first & with ?
        query = query.replace(/&/i, "?");

        options.path = "" + path + query + "&sig=" + hash;
      }

      this.logger.info("Request:", options, "\nBody:", endpoint.body);
      var request;

      if (options.port === 443) {
        request = this.https.request(options);
      } else {
        request = this.http.request(options);
      }

      request.end(endpoint.body);

      // Keep an array of String or Buffers,
      // depending on content type (binary or JSON) of response
      var responseData = [];

      request.on("response", function (response) {
        var isBinary = response.headers["content-type"] === "application/octet-stream";
        if (!isBinary) {
          response.setEncoding("utf8");
        }

        response.on("data", function (chunk) {
          responseData.push(chunk);
        });

        response.on("end", function () {
          _this.logger.info("response ended:", response.statusCode);
          if (callback) {
            if (isBinary) {
              responseData = Buffer.concat(responseData);
            }

            _this.__parseResponse(response, responseData, endpoint.method, callback, skipJsonParsing, customResponseParser);
          }
        });
        response.on("close", function (e) {
          if (e) {
            _this.logger.error("problem with API request detailed stacktrace below ");
            _this.logger.error(e);
            callback(e);
          }
        });
      });
      request.on("error", function (e) {
        _this.logger.error("problem with API request detailed stacktrace below ");
        _this.logger.error(e);
        callback(e);
      });
    }
  }, {
    key: "__parseResponse",
    value: function __parseResponse(httpResponse, data, method, callback, skipJsonParsing, customResponseParser) {
      var isArrayOrBuffer = data instanceof Array || data instanceof Buffer;
      if (!isArrayOrBuffer) {
        throw new Error("data should be of type Array or Buffer");
      }

      var status = httpResponse.statusCode;
      var headers = httpResponse.headers;

      var response = null;
      var error = null;

      try {
        if (status >= 500) {
          error = {
            message: "Server Error",
            statusCode: status
          };
        } else if (httpResponse.headers["content-type"] === "application/octet-stream") {
          response = data;
        } else if (status === 429) {
          // 429 does not return a parsable body
          if (!headers["retry-after"]) {
            // retry based on allowed per second
            var retryAfterMillis = method === "POST" ? 1000 / 2 : 1000 / 5;
            headers["retry-after"] = retryAfterMillis;
          }
          error = {
            body: data.join("")
          };
        } else if (status === 204) {
          response = null;
        } else if (status >= 400 || status < 200) {
          error = {
            body: JSON.parse(data.join("")),
            headers: headers
          };
        } else if (method !== "DELETE") {
          if (!!skipJsonParsing) {
            response = data.join("");
          } else {
            response = JSON.parse(data.join(""));
          }
        } else {
          response = data;
        }
      } catch (parseError) {
        this.logger.error(parseError);
        this.logger.error("could not convert API response to JSON, above error is ignored and raw API response is returned to client");
        this.logger.error("Raw Error message from API ");
        this.logger.error("\"" + data + "\"");

        error = {
          status: status,
          message: "The API response could not be parsed.",
          body: data.join(""),
          parseError: parseError
        };
      }

      if (error) {
        error.statusCode = status;
        error.headers = headers;
      }

      if (typeof callback === "function") {
        if (typeof customResponseParser === "function") {
          // don't try to parse the response on errors
          if (response) {
            response = customResponseParser(response);
          }
        }
        callback(error, response);
      }
    }
  }, {
    key: "_addLimitedAccessMessageToErrors",
    value: function _addLimitedAccessMessageToErrors(callback, limitedAccessStatus) {
      return function (err, data) {
        if (err && err.status == limitedAccessStatus) {
          err._INFO_ = "This endpoint may need activating on your account. Please email support@nexmo.com for more information";
        }

        return callback(err, data);
      };
    }
  }, {
    key: "get",
    value: function get(path, params, callback) {
      var useJwt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var useBasicAuth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

      if (!callback) {
        if (typeof params == "function") {
          callback = params;
          params = {};
        }
      }

      params = params || {};
      if (!useJwt && !useBasicAuth) {
        params["api_key"] = this.credentials.apiKey;
        params["api_secret"] = this.credentials.apiSecret;
      }

      path = path + "?" + querystring.stringify(params);

      var headers = {
        "Content-Type": "application/json"
      };
      if (useJwt) {
        headers["Authorization"] = "Bearer " + this.credentials.generateJwt();
      }
      if (useBasicAuth) {
        headers["Authorization"] = "Basic " + Buffer.from(this.credentials.apiKey + ":" + this.credentials.apiSecret).toString("base64");
      }

      this.request({
        path: path,
        headers: headers
      }, "GET", callback);
    }
  }, {
    key: "delete",
    value: function _delete(path, callback, useJwt, useBasicAuth) {
      var params = {};
      if (!useJwt && !useBasicAuth) {
        params["api_key"] = this.credentials.apiKey;
        params["api_secret"] = this.credentials.apiSecret;
      }

      var headers = {};

      if (useBasicAuth) {
        headers["Authorization"] = "Basic " + Buffer.from(this.credentials.apiKey + ":" + this.credentials.apiSecret).toString("base64");
      }
      path = path + "?" + querystring.stringify(params);

      this.request({
        path: path,
        headers: headers
      }, "DELETE", callback);
    }
  }, {
    key: "postFile",
    value: function postFile(path, options, callback, useJwt) {
      var qs = {};
      if (!useJwt) {
        qs["api_key"] = this.credentials.apiKey;
        qs["api_secret"] = this.credentials.apiSecret;
      }

      if (Object.keys(qs).length) {
        var joinChar = "?";
        if (path.indexOf(joinChar) !== -1) {
          joinChar = "&";
        }
        path = path + joinChar + querystring.stringify(qs);
      }

      var file = options.file;
      delete options.file; // We don't send this as metadata

      var formData = {};

      if (file) {
        formData["filedata"] = {
          value: file,
          options: {
            filename: options.filename || null
          }
        };
      }

      if (options.info) {
        formData.info = JSON.stringify(options.info);
      }

      if (options.url) {
        formData.url = options.url;
      }

      this.requestLib.post({
        url: "https://" + this.host + path,
        formData: formData,
        headers: {
          Authorization: "Bearer " + this.credentials.generateJwt()
        }
      }, callback);
    }
  }, {
    key: "post",
    value: function post(path, params, callback, useJwt, headers) {
      var qs = {};
      if (!useJwt) {
        qs["api_key"] = this.credentials.apiKey;
        qs["api_secret"] = this.credentials.apiSecret;
      }

      var joinChar = "?";
      if (path.indexOf(joinChar) !== -1) {
        joinChar = "&";
      }

      path = path + joinChar + querystring.stringify(qs);

      headers = headers || {};
      if (useJwt) {
        headers["Authorization"] = "Bearer " + this.credentials.generateJwt();
      }

      var encodedParams = void 0;
      if (headers["Content-Type"] == "application/json") {
        encodedParams = JSON.stringify(params);
      } else {
        encodedParams = querystring.stringify(params);
      }

      this.request({ path: path, body: encodedParams, headers: headers }, "POST", callback);
    }
  }, {
    key: "postJson",
    value: function postJson(path, params, callback, useJwt, useBasicAuth) {
      var qs = {};
      if (!useJwt && !useBasicAuth) {
        qs["api_key"] = this.credentials.apiKey;
        qs["api_secret"] = this.credentials.apiSecret;
      }

      var joinChar = "?";
      if (path.indexOf(joinChar) !== -1) {
        joinChar = "&";
      }

      path = path + joinChar + querystring.stringify(qs);

      var headers = {
        "Content-Type": "application/json"
      };
      if (useBasicAuth) {
        headers["Authorization"] = "Basic " + Buffer.from(this.credentials.apiKey + ":" + this.credentials.apiSecret).toString("base64");
      }

      this.request({
        path: path,
        body: JSON.stringify(params),
        headers: headers
      }, "POST", callback);
    }
  }, {
    key: "postUseQueryString",
    value: function postUseQueryString(path, params, callback, useJwt) {
      params = params || {};
      if (!useJwt) {
        params["api_key"] = this.credentials.apiKey;
        params["api_secret"] = this.credentials.apiSecret;
      }

      path = path + "?" + querystring.stringify(params);

      this.request({
        path: path
      }, "POST", callback);
    }
  }]);

  return HttpClient;
}();

exports.default = HttpClient;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9IdHRwQ2xpZW50LmpzIl0sIm5hbWVzIjpbImh0dHBzIiwicmVxdWlyZSIsImh0dHAiLCJyZXF1ZXN0IiwicXVlcnlzdHJpbmciLCJIdHRwQ2xpZW50Iiwib3B0aW9ucyIsImNyZWRlbnRpYWxzIiwiaG9zdCIsInBvcnQiLCJoZWFkZXJzIiwiQWNjZXB0IiwibG9nZ2VyIiwidGltZW91dCIsInJlcXVlc3RMaWIiLCJ1c2VyQWdlbnQiLCJlbmRwb2ludCIsIm1ldGhvZCIsImNhbGxiYWNrIiwic2tpcEpzb25QYXJzaW5nIiwiY3VzdG9tUmVzcG9uc2VQYXJzZXIiLCJwYXRoIiwiT2JqZWN0IiwiYXNzaWduIiwidW5kZWZpbmVkIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJzaWduYXR1cmVTZWNyZXQiLCJzaWduYXR1cmVNZXRob2QiLCJzcGxpdFBhdGgiLCJzcGxpdCIsInBhcmFtcyIsImRlY29kZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJnZXRUaW1lIiwidG9TdHJpbmciLCJhcGlfc2VjcmV0IiwiaGFzaCIsImdlbmVyYXRlU2lnbmF0dXJlIiwicXVlcnkiLCJzb3J0IiwicmVwbGFjZSIsImluZm8iLCJib2R5IiwiZW5kIiwicmVzcG9uc2VEYXRhIiwib24iLCJpc0JpbmFyeSIsInJlc3BvbnNlIiwic2V0RW5jb2RpbmciLCJwdXNoIiwiY2h1bmsiLCJzdGF0dXNDb2RlIiwiQnVmZmVyIiwiY29uY2F0IiwiX19wYXJzZVJlc3BvbnNlIiwiZSIsImVycm9yIiwiaHR0cFJlc3BvbnNlIiwiZGF0YSIsImlzQXJyYXlPckJ1ZmZlciIsIkFycmF5IiwiRXJyb3IiLCJzdGF0dXMiLCJtZXNzYWdlIiwicmV0cnlBZnRlck1pbGxpcyIsImpvaW4iLCJKU09OIiwicGFyc2UiLCJwYXJzZUVycm9yIiwibGltaXRlZEFjY2Vzc1N0YXR1cyIsImVyciIsIl9JTkZPXyIsInVzZUp3dCIsInVzZUJhc2ljQXV0aCIsImFwaUtleSIsImFwaVNlY3JldCIsInN0cmluZ2lmeSIsImdlbmVyYXRlSnd0IiwiZnJvbSIsInFzIiwibGVuZ3RoIiwiam9pbkNoYXIiLCJpbmRleE9mIiwiZmlsZSIsImZvcm1EYXRhIiwidmFsdWUiLCJmaWxlbmFtZSIsInVybCIsInBvc3QiLCJBdXRob3JpemF0aW9uIiwiZW5jb2RlZFBhcmFtcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQUlBLFFBQVFDLFFBQVEsT0FBUixDQUFaO0FBQ0EsSUFBSUMsT0FBT0QsUUFBUSxNQUFSLENBQVg7QUFDQSxJQUFJRSxVQUFVRixRQUFRLFNBQVIsQ0FBZDtBQUNBLElBQUlHLGNBQWNILFFBQVEsYUFBUixDQUFsQjs7SUFFTUksVTtBQUNKLHNCQUFZQyxPQUFaLEVBQXFCQyxXQUFyQixFQUFrQztBQUFBOztBQUNoQyxTQUFLQSxXQUFMLEdBQW1CQSxXQUFuQjtBQUNBLFNBQUtDLElBQUwsR0FBWUYsUUFBUUUsSUFBUixJQUFnQixnQkFBNUI7QUFDQSxTQUFLQyxJQUFMLEdBQVlILFFBQVFHLElBQVIsSUFBZ0IsR0FBNUI7QUFDQSxTQUFLVCxLQUFMLEdBQWFNLFFBQVFOLEtBQVIsSUFBaUJBLEtBQTlCO0FBQ0EsU0FBS0UsSUFBTCxHQUFZSSxRQUFRSixJQUFSLElBQWdCQSxJQUE1QjtBQUNBLFNBQUtRLE9BQUwsR0FBZTtBQUNiLHNCQUFnQixtQ0FESDtBQUViQyxjQUFRO0FBRkssS0FBZjtBQUlBLFNBQUtDLE1BQUwsR0FBY04sUUFBUU0sTUFBdEI7QUFDQSxTQUFLQyxPQUFMLEdBQWVQLFFBQVFPLE9BQXZCO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQlgsT0FBbEI7O0FBRUEsUUFBSUcsUUFBUVMsU0FBWixFQUF1QjtBQUNyQixXQUFLTCxPQUFMLENBQWEsWUFBYixJQUE2QkosUUFBUVMsU0FBckM7QUFDRDtBQUNGOzs7OzRCQUdDQyxRLEVBQ0FDLE0sRUFDQUMsUSxFQUdBO0FBQUE7O0FBQUEsVUFGQUMsZUFFQSx1RUFGa0IsS0FFbEI7QUFBQSxVQURBQyxvQkFDQTs7QUFDQSxVQUFJLE9BQU9ILE1BQVAsS0FBa0IsVUFBdEIsRUFBa0M7QUFDaENDLG1CQUFXRCxNQUFYO0FBQ0FELGlCQUFTQyxNQUFULEdBQWtCRCxTQUFTQyxNQUFULElBQW1CLEtBQXJDO0FBQ0QsT0FIRCxNQUdPLElBQUksT0FBT0EsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUN4Q0QsaUJBQVNDLE1BQVQsR0FBa0JBLE1BQWxCO0FBQ0Q7O0FBRUQsVUFBSUQsU0FBU0MsTUFBVCxLQUFvQixNQUFwQixJQUE4QkQsU0FBU0MsTUFBVCxLQUFvQixRQUF0RCxFQUFnRTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNEO0FBQ0QsVUFBSVgsVUFBVTtBQUNaRSxjQUFNUSxTQUFTUixJQUFULEdBQWdCUSxTQUFTUixJQUF6QixHQUFnQyxLQUFLQSxJQUQvQjtBQUVaQyxjQUFNLEtBQUtBLElBRkM7QUFHWlksY0FBTUwsU0FBU0ssSUFISDtBQUlaSixnQkFBUUQsU0FBU0MsTUFKTDtBQUtaUCxpQkFBU1ksT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0IsS0FBS2IsT0FBdkI7QUFMRyxPQUFkOztBQVFBLFVBQUksS0FBS0csT0FBTCxLQUFpQlcsU0FBckIsRUFBZ0M7QUFDOUJsQixnQkFBUU8sT0FBUixHQUFrQixLQUFLQSxPQUF2QjtBQUNEOztBQUVEO0FBQ0E7QUFDQSxVQUFJRyxTQUFTTixPQUFiLEVBQXNCO0FBQ3BCWSxlQUFPRyxJQUFQLENBQVlULFNBQVNOLE9BQXJCLEVBQThCZ0IsT0FBOUIsQ0FBc0MsVUFBU0MsR0FBVCxFQUFjO0FBQ2xEckIsa0JBQVFJLE9BQVIsQ0FBZ0JpQixHQUFoQixJQUF1QlgsU0FBU04sT0FBVCxDQUFpQmlCLEdBQWpCLENBQXZCO0FBQ0QsU0FGRDtBQUdEOztBQUVELFVBQUksS0FBS3BCLFdBQUwsQ0FBaUJxQixlQUFqQixJQUFvQyxLQUFLckIsV0FBTCxDQUFpQnNCLGVBQXpELEVBQTBFO0FBQ3hFLFlBQU1DLFlBQVl4QixRQUFRZSxJQUFSLENBQWFVLEtBQWIsQ0FBbUIsUUFBbkIsQ0FBbEI7QUFDQSxZQUFNVixPQUFPUyxVQUFVLENBQVYsQ0FBYjs7QUFFQSxZQUFJRSxTQUFTNUIsWUFBWTZCLE1BQVosQ0FBbUJILFVBQVUsQ0FBVixDQUFuQixDQUFiOztBQUVBO0FBQ0EsWUFBSSxDQUFDRSxPQUFPRSxTQUFaLEVBQXVCO0FBQ3JCRixpQkFBT0UsU0FBUCxHQUFvQixJQUFJQyxJQUFKLEdBQVdDLE9BQVgsS0FBdUIsSUFBeEIsR0FBZ0MsQ0FBbkQsQ0FEcUIsQ0FDaUM7QUFDdERKLGlCQUFPRSxTQUFQLEdBQW1CRixPQUFPRSxTQUFQLENBQWlCRyxRQUFqQixFQUFuQjtBQUNEOztBQUVEO0FBQ0EsZUFBT0wsT0FBT00sVUFBZDs7QUFFQSxZQUFNQyxPQUFPLEtBQUtoQyxXQUFMLENBQWlCaUMsaUJBQWpCLENBQW1DUixNQUFuQyxDQUFiOztBQUVBLFlBQUlTLFFBQVEsRUFBWjs7QUFFQTtBQUNBbkIsZUFBT0csSUFBUCxDQUFZTyxNQUFaLEVBQ0dVLElBREgsR0FFR2hCLE9BRkgsQ0FFVyxlQUFPO0FBQ2RlLG1CQUFTLE1BQU1kLEdBQU4sR0FBWSxHQUFaLEdBQWtCSyxPQUFPTCxHQUFQLENBQTNCO0FBQ0QsU0FKSDs7QUFNQTtBQUNBYyxnQkFBUUEsTUFBTUUsT0FBTixDQUFjLElBQWQsRUFBb0IsR0FBcEIsQ0FBUjs7QUFFQXJDLGdCQUFRZSxJQUFSLFFBQWtCQSxJQUFsQixHQUF5Qm9CLEtBQXpCLGFBQXNDRixJQUF0QztBQUNEOztBQUVELFdBQUszQixNQUFMLENBQVlnQyxJQUFaLENBQWlCLFVBQWpCLEVBQTZCdEMsT0FBN0IsRUFBc0MsU0FBdEMsRUFBaURVLFNBQVM2QixJQUExRDtBQUNBLFVBQUkxQyxPQUFKOztBQUVBLFVBQUlHLFFBQVFHLElBQVIsS0FBaUIsR0FBckIsRUFBMEI7QUFDeEJOLGtCQUFVLEtBQUtILEtBQUwsQ0FBV0csT0FBWCxDQUFtQkcsT0FBbkIsQ0FBVjtBQUNELE9BRkQsTUFFTztBQUNMSCxrQkFBVSxLQUFLRCxJQUFMLENBQVVDLE9BQVYsQ0FBa0JHLE9BQWxCLENBQVY7QUFDRDs7QUFFREgsY0FBUTJDLEdBQVIsQ0FBWTlCLFNBQVM2QixJQUFyQjs7QUFFQTtBQUNBO0FBQ0EsVUFBSUUsZUFBZSxFQUFuQjs7QUFFQTVDLGNBQVE2QyxFQUFSLENBQVcsVUFBWCxFQUF1QixvQkFBWTtBQUNqQyxZQUFJQyxXQUNGQyxTQUFTeEMsT0FBVCxDQUFpQixjQUFqQixNQUFxQywwQkFEdkM7QUFFQSxZQUFJLENBQUN1QyxRQUFMLEVBQWU7QUFDYkMsbUJBQVNDLFdBQVQsQ0FBcUIsTUFBckI7QUFDRDs7QUFFREQsaUJBQVNGLEVBQVQsQ0FBWSxNQUFaLEVBQW9CLGlCQUFTO0FBQzNCRCx1QkFBYUssSUFBYixDQUFrQkMsS0FBbEI7QUFDRCxTQUZEOztBQUlBSCxpQkFBU0YsRUFBVCxDQUFZLEtBQVosRUFBbUIsWUFBTTtBQUN2QixnQkFBS3BDLE1BQUwsQ0FBWWdDLElBQVosQ0FBaUIsaUJBQWpCLEVBQW9DTSxTQUFTSSxVQUE3QztBQUNBLGNBQUlwQyxRQUFKLEVBQWM7QUFDWixnQkFBSStCLFFBQUosRUFBYztBQUNaRiw2QkFBZVEsT0FBT0MsTUFBUCxDQUFjVCxZQUFkLENBQWY7QUFDRDs7QUFFRCxrQkFBS1UsZUFBTCxDQUNFUCxRQURGLEVBRUVILFlBRkYsRUFHRS9CLFNBQVNDLE1BSFgsRUFJRUMsUUFKRixFQUtFQyxlQUxGLEVBTUVDLG9CQU5GO0FBUUQ7QUFDRixTQWhCRDtBQWlCQThCLGlCQUFTRixFQUFULENBQVksT0FBWixFQUFxQixhQUFLO0FBQ3hCLGNBQUlVLENBQUosRUFBTztBQUNMLGtCQUFLOUMsTUFBTCxDQUFZK0MsS0FBWixDQUNFLHFEQURGO0FBR0Esa0JBQUsvQyxNQUFMLENBQVkrQyxLQUFaLENBQWtCRCxDQUFsQjtBQUNBeEMscUJBQVN3QyxDQUFUO0FBQ0Q7QUFDRixTQVJEO0FBU0QsT0FyQ0Q7QUFzQ0F2RCxjQUFRNkMsRUFBUixDQUFXLE9BQVgsRUFBb0IsYUFBSztBQUN2QixjQUFLcEMsTUFBTCxDQUFZK0MsS0FBWixDQUFrQixxREFBbEI7QUFDQSxjQUFLL0MsTUFBTCxDQUFZK0MsS0FBWixDQUFrQkQsQ0FBbEI7QUFDQXhDLGlCQUFTd0MsQ0FBVDtBQUNELE9BSkQ7QUFLRDs7O29DQUdDRSxZLEVBQ0FDLEksRUFDQTVDLE0sRUFDQUMsUSxFQUNBQyxlLEVBQ0FDLG9CLEVBQ0E7QUFDQSxVQUFNMEMsa0JBQWtCRCxnQkFBZ0JFLEtBQWhCLElBQXlCRixnQkFBZ0JOLE1BQWpFO0FBQ0EsVUFBSSxDQUFDTyxlQUFMLEVBQXNCO0FBQ3BCLGNBQU0sSUFBSUUsS0FBSixDQUFVLHdDQUFWLENBQU47QUFDRDs7QUFFRCxVQUFNQyxTQUFTTCxhQUFhTixVQUE1QjtBQUNBLFVBQU01QyxVQUFVa0QsYUFBYWxELE9BQTdCOztBQUVBLFVBQUl3QyxXQUFXLElBQWY7QUFDQSxVQUFJUyxRQUFRLElBQVo7O0FBRUEsVUFBSTtBQUNGLFlBQUlNLFVBQVUsR0FBZCxFQUFtQjtBQUNqQk4sa0JBQVE7QUFDTk8scUJBQVMsY0FESDtBQUVOWix3QkFBWVc7QUFGTixXQUFSO0FBSUQsU0FMRCxNQUtPLElBQ0xMLGFBQWFsRCxPQUFiLENBQXFCLGNBQXJCLE1BQXlDLDBCQURwQyxFQUVMO0FBQ0F3QyxxQkFBV1csSUFBWDtBQUNELFNBSk0sTUFJQSxJQUFJSSxXQUFXLEdBQWYsRUFBb0I7QUFDekI7QUFDQSxjQUFJLENBQUN2RCxRQUFRLGFBQVIsQ0FBTCxFQUE2QjtBQUMzQjtBQUNBLGdCQUFNeUQsbUJBQW1CbEQsV0FBVyxNQUFYLEdBQW9CLE9BQU8sQ0FBM0IsR0FBK0IsT0FBTyxDQUEvRDtBQUNBUCxvQkFBUSxhQUFSLElBQXlCeUQsZ0JBQXpCO0FBQ0Q7QUFDRFIsa0JBQVE7QUFDTmQsa0JBQU1nQixLQUFLTyxJQUFMLENBQVUsRUFBVjtBQURBLFdBQVI7QUFHRCxTQVZNLE1BVUEsSUFBSUgsV0FBVyxHQUFmLEVBQW9CO0FBQ3pCZixxQkFBVyxJQUFYO0FBQ0QsU0FGTSxNQUVBLElBQUllLFVBQVUsR0FBVixJQUFpQkEsU0FBUyxHQUE5QixFQUFtQztBQUN4Q04sa0JBQVE7QUFDTmQsa0JBQU13QixLQUFLQyxLQUFMLENBQVdULEtBQUtPLElBQUwsQ0FBVSxFQUFWLENBQVgsQ0FEQTtBQUVOMUQ7QUFGTSxXQUFSO0FBSUQsU0FMTSxNQUtBLElBQUlPLFdBQVcsUUFBZixFQUF5QjtBQUM5QixjQUFJLENBQUMsQ0FBQ0UsZUFBTixFQUF1QjtBQUNyQitCLHVCQUFXVyxLQUFLTyxJQUFMLENBQVUsRUFBVixDQUFYO0FBQ0QsV0FGRCxNQUVPO0FBQ0xsQix1QkFBV21CLEtBQUtDLEtBQUwsQ0FBV1QsS0FBS08sSUFBTCxDQUFVLEVBQVYsQ0FBWCxDQUFYO0FBQ0Q7QUFDRixTQU5NLE1BTUE7QUFDTGxCLHFCQUFXVyxJQUFYO0FBQ0Q7QUFDRixPQXBDRCxDQW9DRSxPQUFPVSxVQUFQLEVBQW1CO0FBQ25CLGFBQUszRCxNQUFMLENBQVkrQyxLQUFaLENBQWtCWSxVQUFsQjtBQUNBLGFBQUszRCxNQUFMLENBQVkrQyxLQUFaLENBQ0UsMkdBREY7QUFHQSxhQUFLL0MsTUFBTCxDQUFZK0MsS0FBWixDQUFrQiw2QkFBbEI7QUFDQSxhQUFLL0MsTUFBTCxDQUFZK0MsS0FBWixRQUFzQkUsSUFBdEI7O0FBRUFGLGdCQUFRO0FBQ05NLGtCQUFRQSxNQURGO0FBRU5DLG1CQUFTLHVDQUZIO0FBR05yQixnQkFBTWdCLEtBQUtPLElBQUwsQ0FBVSxFQUFWLENBSEE7QUFJTkcsc0JBQVlBO0FBSk4sU0FBUjtBQU1EOztBQUVELFVBQUlaLEtBQUosRUFBVztBQUNUQSxjQUFNTCxVQUFOLEdBQW1CVyxNQUFuQjtBQUNBTixjQUFNakQsT0FBTixHQUFnQkEsT0FBaEI7QUFDRDs7QUFFRCxVQUFJLE9BQU9RLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbEMsWUFBSSxPQUFPRSxvQkFBUCxLQUFnQyxVQUFwQyxFQUFnRDtBQUM5QztBQUNBLGNBQUk4QixRQUFKLEVBQWM7QUFDWkEsdUJBQVc5QixxQkFBcUI4QixRQUFyQixDQUFYO0FBQ0Q7QUFDRjtBQUNEaEMsaUJBQVN5QyxLQUFULEVBQWdCVCxRQUFoQjtBQUNEO0FBQ0Y7OztxREFFZ0NoQyxRLEVBQVVzRCxtQixFQUFxQjtBQUM5RCxhQUFPLFVBQVNDLEdBQVQsRUFBY1osSUFBZCxFQUFvQjtBQUN6QixZQUFJWSxPQUFPQSxJQUFJUixNQUFKLElBQWNPLG1CQUF6QixFQUE4QztBQUM1Q0MsY0FBSUMsTUFBSixHQUNFLHdHQURGO0FBRUQ7O0FBRUQsZUFBT3hELFNBQVN1RCxHQUFULEVBQWNaLElBQWQsQ0FBUDtBQUNELE9BUEQ7QUFRRDs7O3dCQUVHeEMsSSxFQUFNVyxNLEVBQVFkLFEsRUFBZ0Q7QUFBQSxVQUF0Q3lELE1BQXNDLHVFQUE3QixLQUE2QjtBQUFBLFVBQXRCQyxZQUFzQix1RUFBUCxLQUFPOztBQUNoRSxVQUFJLENBQUMxRCxRQUFMLEVBQWU7QUFDYixZQUFJLE9BQU9jLE1BQVAsSUFBaUIsVUFBckIsRUFBaUM7QUFDL0JkLHFCQUFXYyxNQUFYO0FBQ0FBLG1CQUFTLEVBQVQ7QUFDRDtBQUNGOztBQUVEQSxlQUFTQSxVQUFVLEVBQW5CO0FBQ0EsVUFBSSxDQUFDMkMsTUFBRCxJQUFXLENBQUNDLFlBQWhCLEVBQThCO0FBQzVCNUMsZUFBTyxTQUFQLElBQW9CLEtBQUt6QixXQUFMLENBQWlCc0UsTUFBckM7QUFDQTdDLGVBQU8sWUFBUCxJQUF1QixLQUFLekIsV0FBTCxDQUFpQnVFLFNBQXhDO0FBQ0Q7O0FBRUR6RCxhQUFPQSxPQUFPLEdBQVAsR0FBYWpCLFlBQVkyRSxTQUFaLENBQXNCL0MsTUFBdEIsQ0FBcEI7O0FBRUEsVUFBTXRCLFVBQVU7QUFDZCx3QkFBZ0I7QUFERixPQUFoQjtBQUdBLFVBQUlpRSxNQUFKLEVBQVk7QUFDVmpFLGdCQUFRLGVBQVIsZ0JBQXFDLEtBQUtILFdBQUwsQ0FBaUJ5RSxXQUFqQixFQUFyQztBQUNEO0FBQ0QsVUFBSUosWUFBSixFQUFrQjtBQUNoQmxFLGdCQUFRLGVBQVIsZUFBb0M2QyxPQUFPMEIsSUFBUCxDQUNsQyxLQUFLMUUsV0FBTCxDQUFpQnNFLE1BQWpCLEdBQTBCLEdBQTFCLEdBQWdDLEtBQUt0RSxXQUFMLENBQWlCdUUsU0FEZixFQUVsQ3pDLFFBRmtDLENBRXpCLFFBRnlCLENBQXBDO0FBR0Q7O0FBRUQsV0FBS2xDLE9BQUwsQ0FDRTtBQUNFa0IsY0FBTUEsSUFEUjtBQUVFWDtBQUZGLE9BREYsRUFLRSxLQUxGLEVBTUVRLFFBTkY7QUFRRDs7OzRCQUVNRyxJLEVBQU1ILFEsRUFBVXlELE0sRUFBUUMsWSxFQUFjO0FBQzNDLFVBQUk1QyxTQUFTLEVBQWI7QUFDQSxVQUFJLENBQUMyQyxNQUFELElBQVcsQ0FBQ0MsWUFBaEIsRUFBOEI7QUFDNUI1QyxlQUFPLFNBQVAsSUFBb0IsS0FBS3pCLFdBQUwsQ0FBaUJzRSxNQUFyQztBQUNBN0MsZUFBTyxZQUFQLElBQXVCLEtBQUt6QixXQUFMLENBQWlCdUUsU0FBeEM7QUFDRDs7QUFFRCxVQUFJcEUsVUFBVSxFQUFkOztBQUVBLFVBQUlrRSxZQUFKLEVBQWtCO0FBQ2hCbEUsZ0JBQVEsZUFBUixlQUFvQzZDLE9BQU8wQixJQUFQLENBQ2xDLEtBQUsxRSxXQUFMLENBQWlCc0UsTUFBakIsR0FBMEIsR0FBMUIsR0FBZ0MsS0FBS3RFLFdBQUwsQ0FBaUJ1RSxTQURmLEVBRWxDekMsUUFGa0MsQ0FFekIsUUFGeUIsQ0FBcEM7QUFHRDtBQUNEaEIsYUFBT0EsT0FBTyxHQUFQLEdBQWFqQixZQUFZMkUsU0FBWixDQUFzQi9DLE1BQXRCLENBQXBCOztBQUVBLFdBQUs3QixPQUFMLENBQ0U7QUFDRWtCLGNBQU1BLElBRFI7QUFFRVg7QUFGRixPQURGLEVBS0UsUUFMRixFQU1FUSxRQU5GO0FBUUQ7Ozs2QkFFUUcsSSxFQUFNZixPLEVBQVNZLFEsRUFBVXlELE0sRUFBUTtBQUN4QyxVQUFJTyxLQUFLLEVBQVQ7QUFDQSxVQUFJLENBQUNQLE1BQUwsRUFBYTtBQUNYTyxXQUFHLFNBQUgsSUFBZ0IsS0FBSzNFLFdBQUwsQ0FBaUJzRSxNQUFqQztBQUNBSyxXQUFHLFlBQUgsSUFBbUIsS0FBSzNFLFdBQUwsQ0FBaUJ1RSxTQUFwQztBQUNEOztBQUVELFVBQUl4RCxPQUFPRyxJQUFQLENBQVl5RCxFQUFaLEVBQWdCQyxNQUFwQixFQUE0QjtBQUMxQixZQUFJQyxXQUFXLEdBQWY7QUFDQSxZQUFJL0QsS0FBS2dFLE9BQUwsQ0FBYUQsUUFBYixNQUEyQixDQUFDLENBQWhDLEVBQW1DO0FBQ2pDQSxxQkFBVyxHQUFYO0FBQ0Q7QUFDRC9ELGVBQU9BLE9BQU8rRCxRQUFQLEdBQWtCaEYsWUFBWTJFLFNBQVosQ0FBc0JHLEVBQXRCLENBQXpCO0FBQ0Q7O0FBRUQsVUFBTUksT0FBT2hGLFFBQVFnRixJQUFyQjtBQUNBLGFBQU9oRixRQUFRZ0YsSUFBZixDQWhCd0MsQ0FnQm5COztBQUVyQixVQUFNQyxXQUFXLEVBQWpCOztBQUVBLFVBQUlELElBQUosRUFBVTtBQUNSQyxpQkFBUyxVQUFULElBQXVCO0FBQ3JCQyxpQkFBT0YsSUFEYztBQUVyQmhGLG1CQUFTO0FBQ1BtRixzQkFBVW5GLFFBQVFtRixRQUFSLElBQW9CO0FBRHZCO0FBRlksU0FBdkI7QUFNRDs7QUFFRCxVQUFJbkYsUUFBUXNDLElBQVosRUFBa0I7QUFDaEIyQyxpQkFBUzNDLElBQVQsR0FBZ0J5QixLQUFLVSxTQUFMLENBQWV6RSxRQUFRc0MsSUFBdkIsQ0FBaEI7QUFDRDs7QUFFRCxVQUFJdEMsUUFBUW9GLEdBQVosRUFBaUI7QUFDZkgsaUJBQVNHLEdBQVQsR0FBZXBGLFFBQVFvRixHQUF2QjtBQUNEOztBQUVELFdBQUs1RSxVQUFMLENBQWdCNkUsSUFBaEIsQ0FDRTtBQUNFRCxhQUFLLGFBQWEsS0FBS2xGLElBQWxCLEdBQXlCYSxJQURoQztBQUVFa0Usa0JBQVVBLFFBRlo7QUFHRTdFLGlCQUFTO0FBQ1BrRixxQ0FBeUIsS0FBS3JGLFdBQUwsQ0FBaUJ5RSxXQUFqQjtBQURsQjtBQUhYLE9BREYsRUFRRTlELFFBUkY7QUFVRDs7O3lCQUVJRyxJLEVBQU1XLE0sRUFBUWQsUSxFQUFVeUQsTSxFQUFRakUsTyxFQUFTO0FBQzVDLFVBQUl3RSxLQUFLLEVBQVQ7QUFDQSxVQUFJLENBQUNQLE1BQUwsRUFBYTtBQUNYTyxXQUFHLFNBQUgsSUFBZ0IsS0FBSzNFLFdBQUwsQ0FBaUJzRSxNQUFqQztBQUNBSyxXQUFHLFlBQUgsSUFBbUIsS0FBSzNFLFdBQUwsQ0FBaUJ1RSxTQUFwQztBQUNEOztBQUVELFVBQUlNLFdBQVcsR0FBZjtBQUNBLFVBQUkvRCxLQUFLZ0UsT0FBTCxDQUFhRCxRQUFiLE1BQTJCLENBQUMsQ0FBaEMsRUFBbUM7QUFDakNBLG1CQUFXLEdBQVg7QUFDRDs7QUFFRC9ELGFBQU9BLE9BQU8rRCxRQUFQLEdBQWtCaEYsWUFBWTJFLFNBQVosQ0FBc0JHLEVBQXRCLENBQXpCOztBQUVBeEUsZ0JBQVVBLFdBQVcsRUFBckI7QUFDQSxVQUFJaUUsTUFBSixFQUFZO0FBQ1ZqRSxnQkFBUSxlQUFSLGdCQUFxQyxLQUFLSCxXQUFMLENBQWlCeUUsV0FBakIsRUFBckM7QUFDRDs7QUFFRCxVQUFJYSxzQkFBSjtBQUNBLFVBQUluRixRQUFRLGNBQVIsS0FBMkIsa0JBQS9CLEVBQW1EO0FBQ2pEbUYsd0JBQWdCeEIsS0FBS1UsU0FBTCxDQUFlL0MsTUFBZixDQUFoQjtBQUNELE9BRkQsTUFFTztBQUNMNkQsd0JBQWdCekYsWUFBWTJFLFNBQVosQ0FBc0IvQyxNQUF0QixDQUFoQjtBQUNEOztBQUVELFdBQUs3QixPQUFMLENBQWEsRUFBRWtCLFVBQUYsRUFBUXdCLE1BQU1nRCxhQUFkLEVBQTZCbkYsZ0JBQTdCLEVBQWIsRUFBcUQsTUFBckQsRUFBNkRRLFFBQTdEO0FBQ0Q7Ozs2QkFFUUcsSSxFQUFNVyxNLEVBQVFkLFEsRUFBVXlELE0sRUFBUUMsWSxFQUFjO0FBQ3JELFVBQUlNLEtBQUssRUFBVDtBQUNBLFVBQUksQ0FBQ1AsTUFBRCxJQUFXLENBQUNDLFlBQWhCLEVBQThCO0FBQzVCTSxXQUFHLFNBQUgsSUFBZ0IsS0FBSzNFLFdBQUwsQ0FBaUJzRSxNQUFqQztBQUNBSyxXQUFHLFlBQUgsSUFBbUIsS0FBSzNFLFdBQUwsQ0FBaUJ1RSxTQUFwQztBQUNEOztBQUVELFVBQUlNLFdBQVcsR0FBZjtBQUNBLFVBQUkvRCxLQUFLZ0UsT0FBTCxDQUFhRCxRQUFiLE1BQTJCLENBQUMsQ0FBaEMsRUFBbUM7QUFDakNBLG1CQUFXLEdBQVg7QUFDRDs7QUFFRC9ELGFBQU9BLE9BQU8rRCxRQUFQLEdBQWtCaEYsWUFBWTJFLFNBQVosQ0FBc0JHLEVBQXRCLENBQXpCOztBQUVBLFVBQUl4RSxVQUFVO0FBQ1osd0JBQWdCO0FBREosT0FBZDtBQUdBLFVBQUlrRSxZQUFKLEVBQWtCO0FBQ2hCbEUsZ0JBQVEsZUFBUixlQUFvQzZDLE9BQU8wQixJQUFQLENBQ2xDLEtBQUsxRSxXQUFMLENBQWlCc0UsTUFBakIsR0FBMEIsR0FBMUIsR0FBZ0MsS0FBS3RFLFdBQUwsQ0FBaUJ1RSxTQURmLEVBRWxDekMsUUFGa0MsQ0FFekIsUUFGeUIsQ0FBcEM7QUFHRDs7QUFFRCxXQUFLbEMsT0FBTCxDQUNFO0FBQ0VrQixjQUFNQSxJQURSO0FBRUV3QixjQUFNd0IsS0FBS1UsU0FBTCxDQUFlL0MsTUFBZixDQUZSO0FBR0V0QjtBQUhGLE9BREYsRUFNRSxNQU5GLEVBT0VRLFFBUEY7QUFTRDs7O3VDQUVrQkcsSSxFQUFNVyxNLEVBQVFkLFEsRUFBVXlELE0sRUFBUTtBQUNqRDNDLGVBQVNBLFVBQVUsRUFBbkI7QUFDQSxVQUFJLENBQUMyQyxNQUFMLEVBQWE7QUFDWDNDLGVBQU8sU0FBUCxJQUFvQixLQUFLekIsV0FBTCxDQUFpQnNFLE1BQXJDO0FBQ0E3QyxlQUFPLFlBQVAsSUFBdUIsS0FBS3pCLFdBQUwsQ0FBaUJ1RSxTQUF4QztBQUNEOztBQUVEekQsYUFBT0EsT0FBTyxHQUFQLEdBQWFqQixZQUFZMkUsU0FBWixDQUFzQi9DLE1BQXRCLENBQXBCOztBQUVBLFdBQUs3QixPQUFMLENBQ0U7QUFDRWtCLGNBQU1BO0FBRFIsT0FERixFQUlFLE1BSkYsRUFLRUgsUUFMRjtBQU9EOzs7Ozs7a0JBR1liLFUiLCJmaWxlIjoiSHR0cENsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBodHRwcyA9IHJlcXVpcmUoXCJodHRwc1wiKTtcbnZhciBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoXCJyZXF1ZXN0XCIpO1xudmFyIHF1ZXJ5c3RyaW5nID0gcmVxdWlyZShcInF1ZXJ5c3RyaW5nXCIpO1xuXG5jbGFzcyBIdHRwQ2xpZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucywgY3JlZGVudGlhbHMpIHtcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gY3JlZGVudGlhbHM7XG4gICAgdGhpcy5ob3N0ID0gb3B0aW9ucy5ob3N0IHx8IFwicmVzdC5uZXhtby5jb21cIjtcbiAgICB0aGlzLnBvcnQgPSBvcHRpb25zLnBvcnQgfHwgNDQzO1xuICAgIHRoaXMuaHR0cHMgPSBvcHRpb25zLmh0dHBzIHx8IGh0dHBzO1xuICAgIHRoaXMuaHR0cCA9IG9wdGlvbnMuaHR0cCB8fCBodHRwO1xuICAgIHRoaXMuaGVhZGVycyA9IHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICB0aGlzLmxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyO1xuICAgIHRoaXMudGltZW91dCA9IG9wdGlvbnMudGltZW91dDtcbiAgICB0aGlzLnJlcXVlc3RMaWIgPSByZXF1ZXN0O1xuXG4gICAgaWYgKG9wdGlvbnMudXNlckFnZW50KSB7XG4gICAgICB0aGlzLmhlYWRlcnNbXCJVc2VyLUFnZW50XCJdID0gb3B0aW9ucy51c2VyQWdlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmVxdWVzdChcbiAgICBlbmRwb2ludCxcbiAgICBtZXRob2QsXG4gICAgY2FsbGJhY2ssXG4gICAgc2tpcEpzb25QYXJzaW5nID0gZmFsc2UsXG4gICAgY3VzdG9tUmVzcG9uc2VQYXJzZXJcbiAgKSB7XG4gICAgaWYgKHR5cGVvZiBtZXRob2QgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2FsbGJhY2sgPSBtZXRob2Q7XG4gICAgICBlbmRwb2ludC5tZXRob2QgPSBlbmRwb2ludC5tZXRob2QgfHwgXCJHRVRcIjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtZXRob2QgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGVuZHBvaW50Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICB9XG5cbiAgICBpZiAoZW5kcG9pbnQubWV0aG9kID09PSBcIlBPU1RcIiB8fCBlbmRwb2ludC5tZXRob2QgPT09IFwiREVMRVRFXCIpIHtcbiAgICAgIC8vIFRPRE86IHZlcmlmeSB0aGUgZm9sbG93aW5nIGZpeCBpcyByZXF1aXJlZFxuICAgICAgLy8gRml4IGJyb2tlbiBkdWUgb3QgNDExIENvbnRlbnQtTGVuZ3RoIGVycm9yIG5vdyBzZW50IGJ5IE5leG1vIEFQSVxuICAgICAgLy8gUEwgMjAxNi1TZXB0LTYgLSBjb21tZW50ZWQgb3V0IENvbnRlbnQtTGVuZ3RoIDBcbiAgICAgIC8vIGhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ10gPSAwO1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGhvc3Q6IGVuZHBvaW50Lmhvc3QgPyBlbmRwb2ludC5ob3N0IDogdGhpcy5ob3N0LFxuICAgICAgcG9ydDogdGhpcy5wb3J0LFxuICAgICAgcGF0aDogZW5kcG9pbnQucGF0aCxcbiAgICAgIG1ldGhvZDogZW5kcG9pbnQubWV0aG9kLFxuICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5oZWFkZXJzKVxuICAgIH07XG5cbiAgICBpZiAodGhpcy50aW1lb3V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wdGlvbnMudGltZW91dCA9IHRoaXMudGltZW91dDtcbiAgICB9XG5cbiAgICAvLyBBbGxvdyBleGlzdGluZyBoZWFkZXJzIHRvIGJlIG92ZXJyaWRkZW5cbiAgICAvLyBBbGxvdyBuZXcgaGVhZGVycyB0byBiZSBhZGRlZFxuICAgIGlmIChlbmRwb2ludC5oZWFkZXJzKSB7XG4gICAgICBPYmplY3Qua2V5cyhlbmRwb2ludC5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBvcHRpb25zLmhlYWRlcnNba2V5XSA9IGVuZHBvaW50LmhlYWRlcnNba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNyZWRlbnRpYWxzLnNpZ25hdHVyZVNlY3JldCAmJiB0aGlzLmNyZWRlbnRpYWxzLnNpZ25hdHVyZU1ldGhvZCkge1xuICAgICAgY29uc3Qgc3BsaXRQYXRoID0gb3B0aW9ucy5wYXRoLnNwbGl0KC9cXD8oLispLyk7XG4gICAgICBjb25zdCBwYXRoID0gc3BsaXRQYXRoWzBdO1xuXG4gICAgICB2YXIgcGFyYW1zID0gcXVlcnlzdHJpbmcuZGVjb2RlKHNwbGl0UGF0aFsxXSk7XG5cbiAgICAgIC8vIGFkZCB0aW1lc3RhbXAgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuICAgICAgaWYgKCFwYXJhbXMudGltZXN0YW1wKSB7XG4gICAgICAgIHBhcmFtcy50aW1lc3RhbXAgPSAobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSB8IDA7IC8vIGZsb29yIHRvIHNlY29uZHNcbiAgICAgICAgcGFyYW1zLnRpbWVzdGFtcCA9IHBhcmFtcy50aW1lc3RhbXAudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgLy8gc3RyaXAgQVBJIFNlY3JldFxuICAgICAgZGVsZXRlIHBhcmFtcy5hcGlfc2VjcmV0O1xuXG4gICAgICBjb25zdCBoYXNoID0gdGhpcy5jcmVkZW50aWFscy5nZW5lcmF0ZVNpZ25hdHVyZShwYXJhbXMpO1xuXG4gICAgICB2YXIgcXVlcnkgPSBcIlwiO1xuXG4gICAgICAvLyByZWJ1aWxkIHF1ZXJ5XG4gICAgICBPYmplY3Qua2V5cyhwYXJhbXMpXG4gICAgICAgIC5zb3J0KClcbiAgICAgICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICBxdWVyeSArPSBcIiZcIiArIGtleSArIFwiPVwiICsgcGFyYW1zW2tleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAvLyByZXBsYWNlIHRoZSBmaXJzdCAmIHdpdGggP1xuICAgICAgcXVlcnkgPSBxdWVyeS5yZXBsYWNlKC8mL2ksIFwiP1wiKTtcblxuICAgICAgb3B0aW9ucy5wYXRoID0gYCR7cGF0aH0ke3F1ZXJ5fSZzaWc9JHtoYXNofWA7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcIlJlcXVlc3Q6XCIsIG9wdGlvbnMsIFwiXFxuQm9keTpcIiwgZW5kcG9pbnQuYm9keSk7XG4gICAgdmFyIHJlcXVlc3Q7XG5cbiAgICBpZiAob3B0aW9ucy5wb3J0ID09PSA0NDMpIHtcbiAgICAgIHJlcXVlc3QgPSB0aGlzLmh0dHBzLnJlcXVlc3Qob3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QgPSB0aGlzLmh0dHAucmVxdWVzdChvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0LmVuZChlbmRwb2ludC5ib2R5KTtcblxuICAgIC8vIEtlZXAgYW4gYXJyYXkgb2YgU3RyaW5nIG9yIEJ1ZmZlcnMsXG4gICAgLy8gZGVwZW5kaW5nIG9uIGNvbnRlbnQgdHlwZSAoYmluYXJ5IG9yIEpTT04pIG9mIHJlc3BvbnNlXG4gICAgdmFyIHJlc3BvbnNlRGF0YSA9IFtdO1xuXG4gICAgcmVxdWVzdC5vbihcInJlc3BvbnNlXCIsIHJlc3BvbnNlID0+IHtcbiAgICAgIHZhciBpc0JpbmFyeSA9XG4gICAgICAgIHJlc3BvbnNlLmhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0gPT09IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI7XG4gICAgICBpZiAoIWlzQmluYXJ5KSB7XG4gICAgICAgIHJlc3BvbnNlLnNldEVuY29kaW5nKFwidXRmOFwiKTtcbiAgICAgIH1cblxuICAgICAgcmVzcG9uc2Uub24oXCJkYXRhXCIsIGNodW5rID0+IHtcbiAgICAgICAgcmVzcG9uc2VEYXRhLnB1c2goY2h1bmspO1xuICAgICAgfSk7XG5cbiAgICAgIHJlc3BvbnNlLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcInJlc3BvbnNlIGVuZGVkOlwiLCByZXNwb25zZS5zdGF0dXNDb2RlKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKGlzQmluYXJ5KSB7XG4gICAgICAgICAgICByZXNwb25zZURhdGEgPSBCdWZmZXIuY29uY2F0KHJlc3BvbnNlRGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fX3BhcnNlUmVzcG9uc2UoXG4gICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIHJlc3BvbnNlRGF0YSxcbiAgICAgICAgICAgIGVuZHBvaW50Lm1ldGhvZCxcbiAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgc2tpcEpzb25QYXJzaW5nLFxuICAgICAgICAgICAgY3VzdG9tUmVzcG9uc2VQYXJzZXJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJlc3BvbnNlLm9uKFwiY2xvc2VcIiwgZSA9PiB7XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICBcInByb2JsZW0gd2l0aCBBUEkgcmVxdWVzdCBkZXRhaWxlZCBzdGFja3RyYWNlIGJlbG93IFwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihlKTtcbiAgICAgICAgICBjYWxsYmFjayhlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmVxdWVzdC5vbihcImVycm9yXCIsIGUgPT4ge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXCJwcm9ibGVtIHdpdGggQVBJIHJlcXVlc3QgZGV0YWlsZWQgc3RhY2t0cmFjZSBiZWxvdyBcIik7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihlKTtcbiAgICAgIGNhbGxiYWNrKGUpO1xuICAgIH0pO1xuICB9XG5cbiAgX19wYXJzZVJlc3BvbnNlKFxuICAgIGh0dHBSZXNwb25zZSxcbiAgICBkYXRhLFxuICAgIG1ldGhvZCxcbiAgICBjYWxsYmFjayxcbiAgICBza2lwSnNvblBhcnNpbmcsXG4gICAgY3VzdG9tUmVzcG9uc2VQYXJzZXJcbiAgKSB7XG4gICAgY29uc3QgaXNBcnJheU9yQnVmZmVyID0gZGF0YSBpbnN0YW5jZW9mIEFycmF5IHx8IGRhdGEgaW5zdGFuY2VvZiBCdWZmZXI7XG4gICAgaWYgKCFpc0FycmF5T3JCdWZmZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImRhdGEgc2hvdWxkIGJlIG9mIHR5cGUgQXJyYXkgb3IgQnVmZmVyXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXR1cyA9IGh0dHBSZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgIGNvbnN0IGhlYWRlcnMgPSBodHRwUmVzcG9uc2UuaGVhZGVycztcblxuICAgIGxldCByZXNwb25zZSA9IG51bGw7XG4gICAgdmFyIGVycm9yID0gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoc3RhdHVzID49IDUwMCkge1xuICAgICAgICBlcnJvciA9IHtcbiAgICAgICAgICBtZXNzYWdlOiBcIlNlcnZlciBFcnJvclwiLFxuICAgICAgICAgIHN0YXR1c0NvZGU6IHN0YXR1c1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgaHR0cFJlc3BvbnNlLmhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0gPT09IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJcbiAgICAgICkge1xuICAgICAgICByZXNwb25zZSA9IGRhdGE7XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICAgIC8vIDQyOSBkb2VzIG5vdCByZXR1cm4gYSBwYXJzYWJsZSBib2R5XG4gICAgICAgIGlmICghaGVhZGVyc1tcInJldHJ5LWFmdGVyXCJdKSB7XG4gICAgICAgICAgLy8gcmV0cnkgYmFzZWQgb24gYWxsb3dlZCBwZXIgc2Vjb25kXG4gICAgICAgICAgY29uc3QgcmV0cnlBZnRlck1pbGxpcyA9IG1ldGhvZCA9PT0gXCJQT1NUXCIgPyAxMDAwIC8gMiA6IDEwMDAgLyA1O1xuICAgICAgICAgIGhlYWRlcnNbXCJyZXRyeS1hZnRlclwiXSA9IHJldHJ5QWZ0ZXJNaWxsaXM7XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3IgPSB7XG4gICAgICAgICAgYm9keTogZGF0YS5qb2luKFwiXCIpXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gMjA0KSB7XG4gICAgICAgIHJlc3BvbnNlID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID49IDQwMCB8fCBzdGF0dXMgPCAyMDApIHtcbiAgICAgICAgZXJyb3IgPSB7XG4gICAgICAgICAgYm9keTogSlNPTi5wYXJzZShkYXRhLmpvaW4oXCJcIikpLFxuICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAobWV0aG9kICE9PSBcIkRFTEVURVwiKSB7XG4gICAgICAgIGlmICghIXNraXBKc29uUGFyc2luZykge1xuICAgICAgICAgIHJlc3BvbnNlID0gZGF0YS5qb2luKFwiXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3BvbnNlID0gSlNPTi5wYXJzZShkYXRhLmpvaW4oXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNwb25zZSA9IGRhdGE7XG4gICAgICB9XG4gICAgfSBjYXRjaCAocGFyc2VFcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IocGFyc2VFcnJvcik7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgXCJjb3VsZCBub3QgY29udmVydCBBUEkgcmVzcG9uc2UgdG8gSlNPTiwgYWJvdmUgZXJyb3IgaXMgaWdub3JlZCBhbmQgcmF3IEFQSSByZXNwb25zZSBpcyByZXR1cm5lZCB0byBjbGllbnRcIlxuICAgICAgKTtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFwiUmF3IEVycm9yIG1lc3NhZ2UgZnJvbSBBUEkgXCIpO1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYFwiJHtkYXRhfVwiYCk7XG5cbiAgICAgIGVycm9yID0ge1xuICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgbWVzc2FnZTogXCJUaGUgQVBJIHJlc3BvbnNlIGNvdWxkIG5vdCBiZSBwYXJzZWQuXCIsXG4gICAgICAgIGJvZHk6IGRhdGEuam9pbihcIlwiKSxcbiAgICAgICAgcGFyc2VFcnJvcjogcGFyc2VFcnJvclxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGVycm9yLnN0YXR1c0NvZGUgPSBzdGF0dXM7XG4gICAgICBlcnJvci5oZWFkZXJzID0gaGVhZGVycztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmICh0eXBlb2YgY3VzdG9tUmVzcG9uc2VQYXJzZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAvLyBkb24ndCB0cnkgdG8gcGFyc2UgdGhlIHJlc3BvbnNlIG9uIGVycm9yc1xuICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICByZXNwb25zZSA9IGN1c3RvbVJlc3BvbnNlUGFyc2VyKHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2FsbGJhY2soZXJyb3IsIHJlc3BvbnNlKTtcbiAgICB9XG4gIH1cblxuICBfYWRkTGltaXRlZEFjY2Vzc01lc3NhZ2VUb0Vycm9ycyhjYWxsYmFjaywgbGltaXRlZEFjY2Vzc1N0YXR1cykge1xuICAgIHJldHVybiBmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgIGlmIChlcnIgJiYgZXJyLnN0YXR1cyA9PSBsaW1pdGVkQWNjZXNzU3RhdHVzKSB7XG4gICAgICAgIGVyci5fSU5GT18gPVxuICAgICAgICAgIFwiVGhpcyBlbmRwb2ludCBtYXkgbmVlZCBhY3RpdmF0aW5nIG9uIHlvdXIgYWNjb3VudC4gUGxlYXNlIGVtYWlsIHN1cHBvcnRAbmV4bW8uY29tIGZvciBtb3JlIGluZm9ybWF0aW9uXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIGRhdGEpO1xuICAgIH07XG4gIH1cblxuICBnZXQocGF0aCwgcGFyYW1zLCBjYWxsYmFjaywgdXNlSnd0ID0gZmFsc2UsIHVzZUJhc2ljQXV0aCA9IGZhbHNlKSB7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gcGFyYW1zO1xuICAgICAgICBwYXJhbXMgPSB7fTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gICAgaWYgKCF1c2VKd3QgJiYgIXVzZUJhc2ljQXV0aCkge1xuICAgICAgcGFyYW1zW1wiYXBpX2tleVwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpS2V5O1xuICAgICAgcGFyYW1zW1wiYXBpX3NlY3JldFwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpU2VjcmV0O1xuICAgIH1cblxuICAgIHBhdGggPSBwYXRoICsgXCI/XCIgKyBxdWVyeXN0cmluZy5zdHJpbmdpZnkocGFyYW1zKTtcblxuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgaWYgKHVzZUp3dCkge1xuICAgICAgaGVhZGVyc1tcIkF1dGhvcml6YXRpb25cIl0gPSBgQmVhcmVyICR7dGhpcy5jcmVkZW50aWFscy5nZW5lcmF0ZUp3dCgpfWA7XG4gICAgfVxuICAgIGlmICh1c2VCYXNpY0F1dGgpIHtcbiAgICAgIGhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdID0gYEJhc2ljICR7QnVmZmVyLmZyb20oXG4gICAgICAgIHRoaXMuY3JlZGVudGlhbHMuYXBpS2V5ICsgXCI6XCIgKyB0aGlzLmNyZWRlbnRpYWxzLmFwaVNlY3JldFxuICAgICAgKS50b1N0cmluZyhcImJhc2U2NFwiKX1gO1xuICAgIH1cblxuICAgIHRoaXMucmVxdWVzdChcbiAgICAgIHtcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgaGVhZGVyc1xuICAgICAgfSxcbiAgICAgIFwiR0VUXCIsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBkZWxldGUocGF0aCwgY2FsbGJhY2ssIHVzZUp3dCwgdXNlQmFzaWNBdXRoKSB7XG4gICAgbGV0IHBhcmFtcyA9IHt9O1xuICAgIGlmICghdXNlSnd0ICYmICF1c2VCYXNpY0F1dGgpIHtcbiAgICAgIHBhcmFtc1tcImFwaV9rZXlcIl0gPSB0aGlzLmNyZWRlbnRpYWxzLmFwaUtleTtcbiAgICAgIHBhcmFtc1tcImFwaV9zZWNyZXRcIl0gPSB0aGlzLmNyZWRlbnRpYWxzLmFwaVNlY3JldDtcbiAgICB9XG5cbiAgICBsZXQgaGVhZGVycyA9IHt9O1xuXG4gICAgaWYgKHVzZUJhc2ljQXV0aCkge1xuICAgICAgaGVhZGVyc1tcIkF1dGhvcml6YXRpb25cIl0gPSBgQmFzaWMgJHtCdWZmZXIuZnJvbShcbiAgICAgICAgdGhpcy5jcmVkZW50aWFscy5hcGlLZXkgKyBcIjpcIiArIHRoaXMuY3JlZGVudGlhbHMuYXBpU2VjcmV0XG4gICAgICApLnRvU3RyaW5nKFwiYmFzZTY0XCIpfWA7XG4gICAgfVxuICAgIHBhdGggPSBwYXRoICsgXCI/XCIgKyBxdWVyeXN0cmluZy5zdHJpbmdpZnkocGFyYW1zKTtcblxuICAgIHRoaXMucmVxdWVzdChcbiAgICAgIHtcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgaGVhZGVyc1xuICAgICAgfSxcbiAgICAgIFwiREVMRVRFXCIsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBwb3N0RmlsZShwYXRoLCBvcHRpb25zLCBjYWxsYmFjaywgdXNlSnd0KSB7XG4gICAgbGV0IHFzID0ge307XG4gICAgaWYgKCF1c2VKd3QpIHtcbiAgICAgIHFzW1wiYXBpX2tleVwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpS2V5O1xuICAgICAgcXNbXCJhcGlfc2VjcmV0XCJdID0gdGhpcy5jcmVkZW50aWFscy5hcGlTZWNyZXQ7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKHFzKS5sZW5ndGgpIHtcbiAgICAgIGxldCBqb2luQ2hhciA9IFwiP1wiO1xuICAgICAgaWYgKHBhdGguaW5kZXhPZihqb2luQ2hhcikgIT09IC0xKSB7XG4gICAgICAgIGpvaW5DaGFyID0gXCImXCI7XG4gICAgICB9XG4gICAgICBwYXRoID0gcGF0aCArIGpvaW5DaGFyICsgcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHFzKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlID0gb3B0aW9ucy5maWxlO1xuICAgIGRlbGV0ZSBvcHRpb25zLmZpbGU7IC8vIFdlIGRvbid0IHNlbmQgdGhpcyBhcyBtZXRhZGF0YVxuXG4gICAgY29uc3QgZm9ybURhdGEgPSB7fTtcblxuICAgIGlmIChmaWxlKSB7XG4gICAgICBmb3JtRGF0YVtcImZpbGVkYXRhXCJdID0ge1xuICAgICAgICB2YWx1ZTogZmlsZSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGZpbGVuYW1lOiBvcHRpb25zLmZpbGVuYW1lIHx8IG51bGxcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmZvKSB7XG4gICAgICBmb3JtRGF0YS5pbmZvID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5pbmZvKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy51cmwpIHtcbiAgICAgIGZvcm1EYXRhLnVybCA9IG9wdGlvbnMudXJsO1xuICAgIH1cblxuICAgIHRoaXMucmVxdWVzdExpYi5wb3N0KFxuICAgICAge1xuICAgICAgICB1cmw6IFwiaHR0cHM6Ly9cIiArIHRoaXMuaG9zdCArIHBhdGgsXG4gICAgICAgIGZvcm1EYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLmNyZWRlbnRpYWxzLmdlbmVyYXRlSnd0KCl9YFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgcG9zdChwYXRoLCBwYXJhbXMsIGNhbGxiYWNrLCB1c2VKd3QsIGhlYWRlcnMpIHtcbiAgICBsZXQgcXMgPSB7fTtcbiAgICBpZiAoIXVzZUp3dCkge1xuICAgICAgcXNbXCJhcGlfa2V5XCJdID0gdGhpcy5jcmVkZW50aWFscy5hcGlLZXk7XG4gICAgICBxc1tcImFwaV9zZWNyZXRcIl0gPSB0aGlzLmNyZWRlbnRpYWxzLmFwaVNlY3JldDtcbiAgICB9XG5cbiAgICBsZXQgam9pbkNoYXIgPSBcIj9cIjtcbiAgICBpZiAocGF0aC5pbmRleE9mKGpvaW5DaGFyKSAhPT0gLTEpIHtcbiAgICAgIGpvaW5DaGFyID0gXCImXCI7XG4gICAgfVxuXG4gICAgcGF0aCA9IHBhdGggKyBqb2luQ2hhciArIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShxcyk7XG5cbiAgICBoZWFkZXJzID0gaGVhZGVycyB8fCB7fTtcbiAgICBpZiAodXNlSnd0KSB7XG4gICAgICBoZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSA9IGBCZWFyZXIgJHt0aGlzLmNyZWRlbnRpYWxzLmdlbmVyYXRlSnd0KCl9YDtcbiAgICB9XG5cbiAgICBsZXQgZW5jb2RlZFBhcmFtcztcbiAgICBpZiAoaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSA9PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgZW5jb2RlZFBhcmFtcyA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kZWRQYXJhbXMgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkocGFyYW1zKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlcXVlc3QoeyBwYXRoLCBib2R5OiBlbmNvZGVkUGFyYW1zLCBoZWFkZXJzIH0sIFwiUE9TVFwiLCBjYWxsYmFjayk7XG4gIH1cblxuICBwb3N0SnNvbihwYXRoLCBwYXJhbXMsIGNhbGxiYWNrLCB1c2VKd3QsIHVzZUJhc2ljQXV0aCkge1xuICAgIGxldCBxcyA9IHt9O1xuICAgIGlmICghdXNlSnd0ICYmICF1c2VCYXNpY0F1dGgpIHtcbiAgICAgIHFzW1wiYXBpX2tleVwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpS2V5O1xuICAgICAgcXNbXCJhcGlfc2VjcmV0XCJdID0gdGhpcy5jcmVkZW50aWFscy5hcGlTZWNyZXQ7XG4gICAgfVxuXG4gICAgbGV0IGpvaW5DaGFyID0gXCI/XCI7XG4gICAgaWYgKHBhdGguaW5kZXhPZihqb2luQ2hhcikgIT09IC0xKSB7XG4gICAgICBqb2luQ2hhciA9IFwiJlwiO1xuICAgIH1cblxuICAgIHBhdGggPSBwYXRoICsgam9pbkNoYXIgKyBxdWVyeXN0cmluZy5zdHJpbmdpZnkocXMpO1xuXG4gICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgaWYgKHVzZUJhc2ljQXV0aCkge1xuICAgICAgaGVhZGVyc1tcIkF1dGhvcml6YXRpb25cIl0gPSBgQmFzaWMgJHtCdWZmZXIuZnJvbShcbiAgICAgICAgdGhpcy5jcmVkZW50aWFscy5hcGlLZXkgKyBcIjpcIiArIHRoaXMuY3JlZGVudGlhbHMuYXBpU2VjcmV0XG4gICAgICApLnRvU3RyaW5nKFwiYmFzZTY0XCIpfWA7XG4gICAgfVxuXG4gICAgdGhpcy5yZXF1ZXN0KFxuICAgICAge1xuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpLFxuICAgICAgICBoZWFkZXJzXG4gICAgICB9LFxuICAgICAgXCJQT1NUXCIsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBwb3N0VXNlUXVlcnlTdHJpbmcocGF0aCwgcGFyYW1zLCBjYWxsYmFjaywgdXNlSnd0KSB7XG4gICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuICAgIGlmICghdXNlSnd0KSB7XG4gICAgICBwYXJhbXNbXCJhcGlfa2V5XCJdID0gdGhpcy5jcmVkZW50aWFscy5hcGlLZXk7XG4gICAgICBwYXJhbXNbXCJhcGlfc2VjcmV0XCJdID0gdGhpcy5jcmVkZW50aWFscy5hcGlTZWNyZXQ7XG4gICAgfVxuXG4gICAgcGF0aCA9IHBhdGggKyBcIj9cIiArIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShwYXJhbXMpO1xuXG4gICAgdGhpcy5yZXF1ZXN0KFxuICAgICAge1xuICAgICAgICBwYXRoOiBwYXRoXG4gICAgICB9LFxuICAgICAgXCJQT1NUXCIsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSHR0cENsaWVudDtcbiJdfQ==