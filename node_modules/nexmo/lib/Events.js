"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require("./index");

var _index2 = _interopRequireDefault(_index);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides access to the `events` resource.
 */
var Events = function () {
  _createClass(Events, null, [{
    key: "PATH",

    /**
     * The path to the `events` resource.
     */
    get: function get() {
      return "/beta/conversations/{conversation_uuid}/events";
    }
  }, {
    key: "BETA2_PATH",
    get: function get() {
      return "/beta2/conversations/{conversation_uuid}/events";
    }

    /**
     * Creates a new Events instance.
     *
     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.
     * @param {Object} options - additional options for the class.
     */

  }]);

  function Events(creds, options) {
    _classCallCheck(this, Events);

    this.creds = creds;
    this.options = options;
  }

  /**
   * Creates an event in a conversation.
   *
   * @param {string} conversationId - The unique identifier for the conversation
   * @param {Object} params - Parameters used when adding an event to the conversation. See https://developer.nexmo.com/api/conversation#createEvent for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  _createClass(Events, [{
    key: "create",
    value: function create(conversationId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: this.options.host || "api.nexmo.com",
        path: Events.PATH.replace("{conversation_uuid}", conversationId),
        method: "POST",
        body: params,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Get an existing event.
     *
     * @param {string} conversationId - The unique identifier for the conversation
     * @param {string|object} query - The unique identifier for the event to retrieve
     *               or a set of filter parameters for the query. For more information
     *               see https://developer.nexmo.com/api/conversation#getEvents
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "get",
    value: function get(conversationId, query, callback) {
      var config = {
        host: this.options.host || "api.nexmo.com",
        path: _Utils2.default.createPathWithQuery(Events.BETA2_PATH.replace("{conversation_uuid}", conversationId), query),
        method: "GET",
        body: undefined,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Get next page of events for a conversation.
     *
     * @param {object} response - The response from a paginated events list
     *               see https://ea.developer.nexmo.com/api/conversation#getEvents
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "next",
    value: function next(response, callback) {
      if (response._links.next) {
        var conversationId = response._links.next.href.match(/CON-[^/]*/g);
        this.get(conversationId, _Utils2.default.getQuery(response._links.next.href), callback);
      } else {
        var error = new Error("The response doesn't have a next page.");
        callback(error, null);
      }
    }

    /**
     * Get previous page of events for a conversation.
     *
     * @param {object} response - The response from a paginated events list
     *               see https://ea.developer.nexmo.com/api/conversation#getEvents
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "prev",
    value: function prev(response, callback) {
      if (response._links.prev) {
        var conversationId = response._links.prev.href.match(/CON-[^/]*/g);
        this.get(conversationId, _Utils2.default.getQuery(response._links.prev.href), callback);
      } else {
        var error = new Error("The response doesn't have a previous page.");
        callback(error, null);
      }
    }

    /**
     * Deleta an existing event.
     *
     * @param {string} conversationId- The unique identifier for the conversation to delete the event from.
     * @param {string} eventId - The unique identifier for the event to delete.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "delete",
    value: function _delete(conversationId, eventId, callback) {
      var config = {
        host: this.options.host || "api.nexmo.com",
        path: Events.PATH.replace("{conversation_uuid}", conversationId) + "/" + eventId,
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };

      this.options.httpClient.request(config, callback);
    }
  }]);

  return Events;
}();

exports.default = Events;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,